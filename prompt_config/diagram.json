{"systemPrompt":"Generate a Mermaid diagram in the appropriate code format based on the user's input. Pay attention to the diagram type, instructions, and the markdown outline. Ensure compliance with diagram-specific rules and best practices.\n\n# Steps\n\n1. **Identify Diagram Type**  \n   Parse the `<DIAGRAM_TYPE>` specified in the input. Recognize supported types such as:\n   - Flowchart\n   - Entity Relationship (ER) Diagram\n   - Gantt Chart\n\n2. **Apply Diagram Instructions**  \n   Follow `<DIAGRAM_INSTRUCTIONS>` provided by the user. If the instructions state \"none,\" make the best diagram possible based on the given type and outline. \n\n3. **Incorporate Outline**  \n   Use the `<OUTLINE_WRITTEN_IN_MARKDOWN>` section of the input to extract structural details and context for the diagram. Follow rules based on the specified diagram type (e.g., nodes, relationships, stages).\n\n4. **Diagram Type-Specific Rules**  \n   - **Flowcharts**: \n     - Conditional statements must be in diamonds before branching.\n     - Avoid phrasing conditional statements as questions; reframe logically.\n   - **Entity Relationship (ER) Diagrams**: \n     - Include all attributes.\n     - Clearly indicate primary keys and foreign keys.\n   - **Gantt Charts**: \n     - Use a slash (`/`) for alternate names (e.g., \"Larva/Caterpillar\").\n     - Default missing start dates to 2000-01-01.\n\n5. **Output in Mermaid Code Format**  \n   Present the final diagram strictly in Mermaid syntax without explanatory text or additional formatting.\n\n# Output Format\n\n- Code must be in Mermaid syntax, formatted according to the required diagram type.\n- Do **not** include any additional text, markdown, or notes.\n\n\n# Notes\n\n- Ensure the output is always valid Mermaid syntax.\n- Pay attention to required adjustments when instructions conflict with the outline and apply best-judgment defaults.","fewShotExamples":[{"chatbotResponse":"flowchart TD  \n    A[Start Search in BST] --> B[Current Node]  \n    B --> C{Is Current Node Null?}  \n    C -- Yes --> D[Search Unsuccessful - Target Not in Tree]  \n    C -- No --> E{Target Value == Current Node's Value}  \n    E -- Yes --> F[Match Found - Search Ends Successfully]  \n    E -- No --> G{Target Value < Current Node's Value}  \n    G -- Yes --> H[Go Left to Left Subtree]  \n    G -- No --> I[Go Right to Right Subtree]  \n    H --> B  \n    I --> B  ","userInput":"Diagram Type: Flowchart\nDiagram Instructions: None\nOutline:\n# **Binary Search Tree (BST) Overview**\n\n## **1. Definition**\n- **BST Structure**: Hierarchical data structure with nodes having at most two children.\n  - **Left Subtree**: Contains values smaller than the node.\n  - **Right Subtree**: Contains values greater than the node.\n\n## **2. Search Operation in BST**\n### **2.1 Starting Point**\n- Begins at the **root node**.\n\n### **2.2 Traversal Decision**\n- **Go Left**: If target value < current node’s value.\n  - Left subtree contains smaller values.\n- **Go Right**: If target value > current node’s value.\n  - Right subtree contains larger values.\n- **Match Found**: If target value == current node’s value.\n  - Search ends successfully.\n\n### **2.3 Search Termination**\n- **Unsuccessful Search**: Reaching a `null` reference (empty child node) indicates the target is not in the tree.\n\n## **3. Performance**\n- **Balanced Trees**: Average time complexity is **O(log n)**.\n- **Skewed Trees**: Worst-case time complexity is **O(n)**, where nodes form a linked-list-like structure.\n\n## **4. Optimization**\n- **Self-Balancing BSTs**:\n  - **AVL Trees**: Maintain logarithmic height to optimize search efficiency.\n  - **Red-Black Trees**: Ensure balanced tree structure for efficient operations."},{"chatbotResponse":"erDiagram\n    ACCOUNT {\n        string email \"primary key\"\n        string fname\n        string lname\n        string password\n        string type\n    }\n    ADMIN {\n        string email \"primary key, foreign key\"\n    }\n    CLIENT {\n        string email \"primary key, foreign key\"\n        string phoneNumber\n    }\n    OWNER {\n        string email \"primary key, foreign key\"\n    }\n    CUSTOMER {\n        string email \"primary key, foreign key\"\n        string creditCardNumber\n        string creditCardCCV\n        string creditCardExp\n        string currentLocation\n    }\n    PROPERTY {\n        string propertyName \"primary key\"\n        string ownerEmail \"primary key, foreign key\"\n        string propertyDescription\n        int capacity\n        float costPerNightPerPerson\n        string street\n        string city\n        string state\n        string zip\n    }\n    AMENITIES {\n        string propertyName \"primary key, foreign key\"\n        string ownerEmail \"primary key, foreign key\"\n        string amenityName \"primary key\"\n    }\n    AIRPORT {\n        int airportID \"primary key\"\n        string airportName \"unique\"\n        string timezone\n        string street\n        string city\n        string state\n        string zip\n    }\n    ATTRACTIONS {\n        int airportID \"primary key, foreign key\"\n        string attractionName \"primary key\"\n        string description\n    }\n    AIRLINE {\n        string airlineName \"primary key\"\n        float rating\n    }\n    FLIGHTS {\n        string flightNumber \"primary key\"\n        string departureTime\n        string arrivalTime\n        string departureDate\n        float costPerSeat\n        int capacity\n        string flightBy \"primary key, foreign key\"\n        int flightFrom \"foreign key\"\n        int flightTo \"foreign key\"\n    }\n    CLOSETO {\n        string propertyName \"primary key, foreign key\"\n        string propertyOwner \"primary key, foreign key\"\n        int airportID \"primary key, foreign key\"\n        float distance\n    }\n    REVIEW {\n        string propertyName \"primary key, foreign key\"\n        string propertyOwner \"primary key, foreign key\"\n        string email \"primary key, foreign key\"\n        string content\n        int score\n    }\n    RATES {\n        string ownerEmail \"foreign key\"\n        string customerEmail \"foreign key\"\n        int score\n    }\n    ACCOUNT ||--o{ ADMIN : has\n    ACCOUNT ||--o{ CLIENT : has\n    CLIENT ||--o{ OWNER : has\n    CLIENT ||--o{ CUSTOMER : has\n    OWNER ||--o{ PROPERTY : owns\n    PROPERTY ||--o{ AMENITIES : has\n    AIRPORT ||--o{ ATTRACTIONS : has\n    AIRLINE ||--o{ FLIGHTS : operates\n    AIRPORT ||--o{ FLIGHTS : departure\n    AIRPORT ||--o{ FLIGHTS : arrival\n    PROPERTY ||--o{ CLOSETO : near\n    AIRPORT ||--o{ CLOSETO : near\n    CUSTOMER ||--o{ REVIEW : writes\n    PROPERTY ||--o{ REVIEW : receives\n    OWNER ||--o{ RATES : \"receives rating from\"\n    CUSTOMER ||--o{ RATES : \"gives rating to\"","userInput":"Diagram Type: ER Diagram\n\nDiagram Instructions: \nNone\n\n# **Database Schema and Queries Outline**\n\n## **1. Database Setup**\n### **1.1 Create Database**\n- Drop existing `trips` database if exists.\n- Create new `trips` database.\n- Use `trips` database.\n\n## **2. Table Definitions**\n### **2.1 Account Table**\n- Columns: `email`, `fname`, `lname`, `password`, `type`\n- Primary Key: `email`\n\n### **2.2 Admin Table**\n- Columns: `email`\n- Foreign Key: `email` references `account(email)`\n- Primary Key: `email`\n\n### **2.3 Client Table**\n- Columns: `email`, `phoneNumber`\n- Foreign Key: `email` references `account(email)`\n- Unique Key: `phoneNumber`\n- Primary Key: `email`\n\n### **2.4 Owner Table**\n- Columns: `email`\n- Foreign Key: `email` references `client(email)`\n- Primary Key: `email`\n\n### **2.5 Customer Table**\n- Columns: `email`, `creditCardNumber`, `creditCardCCV`, `creditCardExp`, `currentLocation`\n- Foreign Key: `email` references `client(email)`\n- Primary Key: `email`\n\n### **2.6 Property Table**\n- Columns: `propertyName`, `ownerEmail`, `propertyDescription`, `capacity`, `costPerNightPerPerson`, `street`, `city`, `state`, `zip`\n- Foreign Key: `ownerEmail` references `owner(email)`\n- Unique Key: `address (street, city, state, zip)`\n- Primary Key: `propertyName, ownerEmail`\n\n### **2.7 Amenities Table**\n- Columns: `propertyName`, `ownerEmail`, `amenityName`\n- Foreign Key: `propertyName, ownerEmail` references `property(propertyName, ownerEmail)`\n- Primary Key: `propertyName, ownerEmail, amenityName`\n\n### **2.8 Airport Table**\n- Columns: `airportID`, `airportName`, `timezone`, `street`, `city`, `state`, `zip`\n- Unique Key: `address (street, city, state, zip)`, `airportName`\n- Primary Key: `airportID`\n\n### **2.9 Attractions Table**\n- Columns: `airportID`, `attractionName`\n- Foreign Key: `airportID` references `airport(airportID)`\n- Primary Key: `airportID, attractionName`\n\n### **2.10 Airline Table**\n- Columns: `airlineName`, `rating`\n- Primary Key: `airlineName`\n\n### **2.11 Flights Table**\n- Columns: `flightNumber`, `departureTime`, `arrivalTime`, `departureDate`, `costPerSeat`, `capacity`, `flightBy`, `flightFrom`, `flightTo`\n- Foreign Keys: `flightBy` references `airline(airlineName)`, `flightFrom` references `airport(airportID)`, `flightTo` references `airport(airportID)`\n- Primary Key: `flightBy, flightNumber`\n\n### **2.12 CloseTo Table**\n- Columns: `propertyName`, `propertyOwner`, `airportID`, `distance`\n- Foreign Keys: `propertyName, propertyOwner` references `property(propertyName, ownerEmail)`, `airportID` references `airport(airportID)`\n- Primary Key: `propertyName, airportID`\n\n### **2.13 Review Table**\n- Columns: `propertyName`, `propertyOwner`, `email`, `content`, `score`\n- Foreign Keys: `email` references `customer(email)`, `propertyName, propertyOwner` references `property(propertyName, ownerEmail)`\n- Primary Key: `email, propertyName, propertyOwner`\n\n### **2.14 Rates Table**\n- Columns: `ownerEmail`, `customerEmail`, `score`\n- Foreign Keys: `"},{"chatbotResponse":"gantt  \n    title Finishing a Basement: Timeline and Task Overlaps  \n    dateFormat  YYYY-MM-DD  \n    section Pre-Construction Planning & Permits  \n    Finalize design/layout           :done,  des1, 2000-01-01, 2000-01-07  \n    Select materials                 :done,  des2, 2000-01-01, 2000-01-07  \n    Obtain permits                   :done,  des3, 2000-01-01, 2000-01-14  \n    Schedule contractors             :done,  des4, 2000-01-01, 2000-01-07  \n    section Demolition & Prep  \n    Remove existing finishes         :done,  des5, 2000-01-08, 2000-01-11  \n    Address foundational cracks      :done,  des6, 2000-01-08, 2000-01-11  \n    section Rough-In Utilities  \n    Electrical (lighting, outlets)   :done,  des7, 2000-01-12, 2000-01-16  \n    Plumbing (bathroom, laundry lines):done, des8, 2000-01-12, 2000-01-15  \n    HVAC (ductwork, vents)           :done,  des9, 2000-01-17, 2000-01-19  \n    section Framing  \n    Build walls, soffits, ceiling joists :done, des10, 2000-01-20, 2000-01-25  \n    Start insulating exterior walls      :done, des11, 2000-01-23, 2000-01-25  \n    section Insulation & Vapor Barrier  \n    Install insulation               :done,  des12, 2000-01-26, 2000-01-28  \n    Add vapor barrier                :done,  des13, 2000-01-26, 2000-01-28  \n    section Drywall  \n    Hang drywall                     :done,  des14, 2000-01-29, 2000-01-31  \n    Tape, mud, sand drywall          :done,  des15, 2000-02-01, 2000-02-06  \n    section Painting  \n    Paint walls, ceilings, trim      :done,  des16, 2000-02-07, 2000-02-11  \n    section Flooring  \n    Install flooring (LVP, tile, carpet) :done, des17, 2000-02-12, 2000-02-16  \n    section Trim & Doors  \n    Install baseboards, crown molding, doors :done, des18, 2000-02-17, 2000-02-23  \n    section Final Touches  \n    Install fixtures, outlets, cabinets, countertops, appliances :done, des19, 2000-02-24, 2000-03-02  \n    section Final Inspections & Punch List  \n    Pass final electrical/plumbing inspections :done, des20, 2000-03-03, 2000-03-07  ","userInput":"Diagram Type: Gnatt Chart\n\nDiagram Instructions: \nNone\n\nOutline:\n# Finishing a Basement: Timeline and Task Overlaps\n\n**Estimated Total Time: 10-16 weeks (ideal conditions)**\n\n---\n\n## **1. Pre-Construction Planning & Permits (1-2 weeks)**\n- **Tasks**:\n  - Finalize design/layout\n  - Select materials\n  - Obtain permits\n  - Schedule contractors\n- **Details**:\n  - Permits may take 1-2 weeks.\n  - Overlap: Order materials while waiting for permit approval.\n\n---\n\n## **2. Demolition & Prep (3-7 days)**\n- **Tasks**:\n  - Remove existing finishes and debris\n  - Address foundational cracks or moisture\n- **Details**:\n  - Duration depends on the existing state of the basement.\n  - Overlap: Schedule inspections during demolition.\n\n---\n\n## **3. Rough-In Utilities (1-2 weeks)**\n- **Tasks**:\n  - **Electrical**: 3-5 days (lighting, outlets)\n  - **Plumbing**: 2-4 days (bathroom, laundry lines)\n  - **HVAC**: 2-3 days (ductwork, vents)\n- **Overlap**:\n  - Plumbing and electrical can be done simultaneously if coordinated.\n  - HVAC typically follows plumbing/electrical.\n- **Dependency**:\n  - Requires inspections before closing walls.\n\n---\n\n## **4. Framing (3-7 days)**\n- **Tasks**:\n  - Build walls, soffits, ceiling joists, door frames\n- **Details**:\n  - Use pressure-treated lumber.\n- **Overlap**:\n  - Start insulating exterior walls while framing continues.\n\n---\n\n## **5. Insulation & Vapor Barrier (2-3 days)**\n- **Tasks**:\n  - Install insulation (fiberglass or spray foam)\n  - Add vapor barrier if required\n- **Details**:\n  - Focus on exterior walls and rim joists.\n  - Ensure framing inspection is complete.\n\n---\n\n## **6. Drywall (1-2 weeks)**\n- **Tasks**:\n  - Hang, tape, mud, sand drywall\n  - Prime walls if painting later\n- **Details**:\n  - Hanging: 2-3 days\n  - Mudding/Sanding: 3-5 days (drying time between coats)\n- **Overlap**:\n  - Install cabinets/vanities while drywall mud dries.\n\n---\n\n## **7. Painting (3-5 days)**\n- **Tasks**:\n  - Paint walls, ceilings, trim\n- **Details**:\n  - Use mold-resistant paint.\n  - Allow full drying between coats.\n- **Overlap**:\n  - Paint sequentially to allow flooring installation in painted areas.\n\n---\n\n## **8. Flooring (3-7 days)**\n- **Tasks**:\n  - Install flooring (LVP, tile, carpet)\n  - Subfloor and underlayment\n- **Details**:\n  - Tile (bathrooms/laundry): 1-2 days\n  - LVP or carpet: 2-3 days for larger areas\n- **Overlap**:\n  - Install vanities/toilets while flooring is laid in other areas.\n\n---\n\n## **9. Trim & Doors (4-7 days)**\n- **Tasks**:\n  - Install baseboards, crown molding, doors, hardware\n- **Details**:\n  - Paint trim before installing.\n\n---\n\n## **10. Final Touches (1-2 weeks)**\n- **Tasks**:\n  - Install fixtures, outlets, cabinets, countertops, appliances\n- **Details**:\n  - Order countertops early (may take 1-2 weeks).\n  - Overlap: Assemble furniture/decorate while waiting for countertops.\n\n---\n\n## **11. Final Inspections & Punch List (3-5 days)**\n- **Tasks**:\n  - Pass final electrical/plumbing inspections"},{"chatbotResponse":"gantt    \n    title MCU TV Shows Timeline    \n    dateFormat  YYYY-MM-DD    \n    \n    section Phase 1-3 (Infinity Saga) – Marvel TV (Pre-Disney+)  \n    Agents of S.H.I.E.L.D.            :done, des1, 2013-04-23, 2020-08-12    \n    Agent Carter                      :done, des2, 2015-01-06, 2016-03-01    \n    Daredevil                         :done, des3, 2015-04-10, 2018-10-19    \n    Jessica Jones                     :done, des4, 2015-11-20, 2019-06-14    \n    Luke Cage                         :done, des5, 2016-09-30, 2018-06-22    \n    Iron Fist                         :done, des6, 2017-03-17, 2018-09-07    \n    The Defenders                     :done, des7, 2017-08-18, 2017-08-18    \n    The Punisher                      :done, des8, 2017-11-17, 2019-01-18    \n    Inhumans                          :done, des9, 2017-09-29, 2017-11-10    \n    Runaways                          :done, des10, 2017-11-21, 2019-12-13    \n    Cloak & Dagger                    :done, des11, 2018-06-07, 2019-05-30    \n    Helstrom                          :done, des12, 2020-10-16, 2020-10-16    \n      \n    section Phase 4 (2021-2022) – Disney+ MCU Shows  \n    WandaVision                       :done, des13, 2021-01-15, 2021-03-05    \n    The Falcon and the Winter Soldier :done, des14, 2021-03-19, 2021-04-23    \n    Loki (Season 1)                   :done, des15, 2021-06-09, 2021-07-14    \n    What If…? (Season 1)              :done, des16, 2021-08-11, 2021-10-06    \n    Hawkeye                           :done, des17, 2021-11-24, 2021-12-22    \n      \n    section Phase 5 (2022-Present) – The Multiverse Saga  \n    Moon Knight                       :done, des18, 2022-03-30, 2022-05-04    \n    Ms. Marvel                        :done, des19, 2022-06-08, 2022-07-13    \n    I Am Groot (Season 1)             :done, des20, 2022-08-10, 2022-08-10    \n    She-Hulk- Attorney at Law         :done, des21, 2022-08-18, 2022-10-13    \n    Werewolf by Night (Special)       :done, des22, 2022-10-07, 2022-10-07    \n    The Guardians of the Galaxy Holiday Special :done, des23, 2022-11-25, 2022-11-25    \n    Secret Invasion                   :done, des24, 2023-06-21, 2023-07-26    \n    I Am Groot (Season 2)             :done, des25, 2023-09-06, 2023-09-06    \n    Loki (Season 2)                   :done, des26, 2023-10-5, 2023-11-09","userInput":"Diagram Type: Gantt chart\n\nDiagram Instructions: \nNone\n\nOutline:\n\nHere is a complete list of all **MCU shows** along with their **release dates** in order of airing.\n\n## **Phase 1-3 (Infinity Saga) – Marvel TV (Pre-Disney+)**\nBefore Disney+ shows, Marvel produced TV series that were loosely connected to the MCU.\n\n1. **Agents of S.H.I.E.L.D.** (ABC) – **April 23, 2013 – August 12, 2020**  \n2. **Agent Carter** (ABC) – **January 6, 2015 – March 1, 2016**  \n3. **Daredevil** (Netflix) – **April 10, 2015 – October 19, 2018**  \n4. **Jessica Jones** (Netflix) – **November 20, 2015 – June 14, 2019**  \n5. **Luke Cage** (Netflix) – **September 30, 2016 – June 22, 2018**  \n6. **Iron Fist** (Netflix) – **March 17, 2017 – September 7, 2018**  \n7. **The Defenders** (Netflix) – **August 18, 2017** (Limited Series)  \n8. **The Punisher** (Netflix) – **November 17, 2017 – January 18, 2019**  \n9. **Inhumans** (ABC) – **September 29, 2017 – November 10, 2017** (Canceled)  \n10. **Runaways** (Hulu) – **November 21, 2017 – December 13, 2019**  \n11. **Cloak & Dagger** (Freeform) – **June 7, 2018 – May 30, 2019**  \n12. **Helstrom** (Hulu) – **October 16, 2020** (Non-canon, Canceled after 1 season)  \n\nThese shows were **produced by Marvel Television** and were **not fully integrated into the main MCU timeline**. When **Disney+ launched**, Marvel Studios took full control, starting the **official MCU TV series**.\n\n---\n\n## **Phase 4 (2021-2022) – Disney+ MCU Shows**\nMarvel Studios officially launched **Disney+ series** that directly connect to the **main MCU**.\n\n1. **WandaVision** – **January 15, 2021 – March 5, 2021**  \n2. **The Falcon and the Winter Soldier** – **March 19, 2021 – April 23, 2021**  \n3. **Loki (Season 1)** – **June 9, 2021 – July 14, 2021**  \n4. **What If…? (Season 1)** – **August 11, 2021 – October 6, 2021**  \n5. **Hawkeye** – **November 24, 2021 – December 22, 2021**  \n\n---\n\n## **Phase 5 (2022-Present) – The Multiverse Saga**\n1. **Moon Knight** – **March 30, 2022 – May 4, 2022**  \n2. **Ms. Marvel** – **June 8, 2022 – July 13, 2022**  \n3. **I Am Groot (Season 1)** – **August 10, 2022**  \n4. **She-Hulk: Attorney at Law** – **August 18, 2022 – October 13, 2022**  \n5. **Werewolf by Night (Special)** – **October 7, 2022**  \n6. **The Guardians of the Galaxy Holiday Special** – **November 25, 2022**  \n7. **Secret Invasion** – **June 21, 2023 – July 26, 2023**  \n8. **Loki (Season 2)** – **October 5, 2023 – November 9, 2023**  "}],"chatParameters":{"deploymentName":"fldcfopenai-4o-PTU","maxResponseLength":800,"temperature":0.7,"topProbablities":0.95,"stopSequences":[],"pastMessagesToInclude":10,"frequencyPenalty":0,"presencePenalty":0}}